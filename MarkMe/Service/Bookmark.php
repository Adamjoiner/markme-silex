<?php

namespace MarkMe\Service;

use Doctrine\ORM\EntityRepository;
use MarkMe\Entity\Tag;
use MarkMe\Entity\User as UserEntity;
use MarkMe\Entity\Bookmark as BookmarkEntity;

/**
 * Bookmark
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Bookmark extends EntityRepository implements BookmarkInterface {

    public function count(UserEntity $user) {
        return $this->createQueryBuilder('b')->select('count(b.id)')
                        ->where('b.user', $user)
                        ->getQuery()->getSingleResult();
    }

    public function create(BookmarkEntity $bookmark, $flush = true) {
        $this->getEntityManager()->persist($bookmark);
        if ($flush == TRUE)
            $this->getEntityManager()->flush($bookmark);
        return $bookmark;
    }

    public function update(\MarkMe\Entity\Bookmark $bookmark, $flush = true) {
        $this->getEntityManager()->persist($bookmark);
        if ($flush == TRUE)
            $this->getEntityManager()->flush($bookmark);
        return $bookmark;
    }

    public function delete(\MarkMe\Entity\Bookmark $bookmark, $flush = true) {
        $this->getEntityManager()->remove($bookmark);
        if ($flush == TRUE)
            $this->getEntityManager()->flush($bookmark);
        return $bookmark;
    }

    public function search($query, UserEntity $user, $limit, $offset) {
        return $this->createQueryBuilder('b')
                        ->where("b.user = :user ")
                        ->andWhere("b.title LIKE :title")
                        ->orWhere("b.description LIKE :description")
                        ->orWhere("b.url LIKE :url")
                        ->orderBy("b.createdAt ", "DESC")
                        ->getQuery()
                        ->setMaxResults($limit)
                        ->setFirstResult($offset)
                        ->execute(array(
                            "user" => $user,
                            "title" => "%$query%",
                            "description" => "%$query%",
                            "url" => "%$query%"
        ));
    }

    /**
     * @param $name
     * @param UserEntity $user
     * @return array|\MarkMe\Entity\Bookmark[]
     */
    public function findByTag($tags, UserEntity $user, $limit, $offset) {
        return $this->createQueryBuilder("b")
                        ->where('b.user = :user ')
                        ->andWhere('b.tags LIKE :tags ')
                        ->orderBy('b.createdAt', 'DESC')
                        ->getQuery()
                        ->setMaxResults($limit)
                        ->setFirstResult($offset)
                        ->execute(array('tags' => "%$tags%", 'user' => $user));
    }

    function getAll(UserEntity $user, $limit = 100, $offset = 0) {
        return $this->findBy(array("user" => $user), array('created_at' => "DESC", $limit, $offset * $limit));
    }

    function searchTags($tags, UserEntity $user, $limit = 10) {
        $bookmarks = $this->createQueryBuilder('b')
                ->select('b.tags')
                ->where('b.tags LIKE :tags')
                ->andWhere('b.user = :user')
                ->getQuery()
                ->setMaxResults($limit)
                ->execute(array('tags' => "%$tags%", 'user' => $user));

        $tags = array();

        foreach ($bookmarks as $bookmark) {
            foreach ($bookmark['tags'] as $tag) {
                if (!in_array($tag, $tags)) {
                    $tags[] = $tag;
                }
            }
        }
        return $tags;
    }

    function getAllTags(UserEntity $user, $limit = 50) {
        $bookmarks = $this->createQueryBuilder('b')
                ->select('b.tags')
                ->where('b.user = :user')
                ->andWhere(' LENGTH(b.tags) > 0 ')
                ->getQuery()
                ->setMaxResults($limit)
                ->execute(array('user' => $user));
        $tags = array();

        foreach ($bookmarks as $bookmark) {
            foreach ($bookmark['tags'] as $tag) {
                if (!in_array($tag, $tags)) {
                    $tags[] = $tag;
                }
            }
        }
        return $tags;
    }

}
