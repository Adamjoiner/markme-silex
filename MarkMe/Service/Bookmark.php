<?php

namespace MarkMe\Service;

use Doctrine\ORM\EntityRepository;
use MarkMe\Entity\Tag;
use MarkMe\Entity\User as UserEntity;
use MarkMe\Entity\Bookmark as BookmarkEntity;


/**
 * Bookmark
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Bookmark extends EntityRepository implements BookmarkInterface
{
    public function count(UserEntity $user)
    {
        return $this->createQueryBuilder('b')->select('count(b.id)')
            ->where('b.user', $user)
            ->getQuery()->getSingleResult();
    }

    public function create(BookmarkEntity $bookmark, $flush = true)
    {
        $this->getEntityManager()->persist($bookmark);
        if ($flush == TRUE) $this->getEntityManager()->flush($bookmark);
        return $bookmark;
    }

    public function update(\MarkMe\Entity\Bookmark $bookmark, $flush = true)
    {
        $this->getEntityManager()->persist($bookmark);
        if ($flush == TRUE) $this->getEntityManager()->flush($bookmark);
        return $bookmark;
    }

    public function delete(\MarkMe\Entity\Bookmark $bookmark, $flush = true)
    {
        $this->getEntityManager()->remove($bookmark);
        if ($flush == TRUE) $this->getEntityManager()->flush($bookmark);
        return $bookmark;
    }

    public function search($query, UserEntity $user)
    {
        return $this->createQueryBuilder('b')
            ->where("b.title LIKE :title")
            ->orWhere("b.description LIKE :description")
            ->orWhere("b.url LIKE :url")
            ->orderBy("b.created_at ", "DESC")
            ->where("b.user", $user)
            ->getQuery()->execute(array(
                "title" => "%$query%",
                "description" => "%$query%",
                "url" => "%$query%"
            ));

    }

    /**
     * @param $name
     * @param UserEntity $user
     * @return array|\MarkMe\Entity\Bookmark[]
     */
    public function getByTag($name, UserEntity $user)
    {
        $tags = $this->getEntityManager()
            ->createQueryBuilder("b")
            ->innerJoin('b.tags', 't', 'WITH', 't.name LIKE :name')
            ->where('b.user', $user)
            ->getQuery()
            ->execute(array('name' => "%name%"));

        $results = array();
        /* @var \MarkMe\Entity\Bookmark[] $results */
        foreach ($tags as $tag) {
            /* @var Tag $tag */
            $results = array_merge($results, $tag->getBookmarks());
        }
        return $results;
    }

    function getAll($offset = 0, $limit = 100, UserEntity $user)
    {
        return $this->findBy(array("user" => $user), array('created_at' => "DESC", $limit, $offset * $limit));
    }
}
